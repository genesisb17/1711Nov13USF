package com.revature.hello;

import java.util.Arrays;
import java.util.Random;

public class SearchAndSorts {
	/*
	 * 1. Binary Search (COMPLETE)
	 * 2. Breadth First Search
	 * 3. Depth First Search
	 * 4. Bubble Sort
	 * 5. Merge Sort
	 * 6. Insertion Sort
	 */
	
	public static void main(String[] args) {
		
		int[] numArray = {99, 89, 45, 22, 12, 34, 24, 56, 3, 10};
		int num;
		Random gen = new Random();
		
		System.out.println("Running Searches...");
		System.out.println();
		System.out.print("Unsorted List: ");
		Arrays.stream(numArray).forEach(n -> System.out.print(n + ", "));
		System.out.println();
		System.out.println();
		
		
		bubbleSort(numArray);
		
		//System.out.println(bubbleSort(numArray)[0]);
//		num = getRandomElement(numArray, gen);
//		binarySearch(num, numArray);
//		
//		
//		num = getRandomElement(numArray, gen);
//		System.out.println("Running Breadth-First Search for number " + num + "...");
		
	}
	
		public static int getRandomElement(int[] arr, Random g){
			return arr[g.nextInt(arr.length)];
		}
		
		//Runs in O(n^2)
		public static int[] bubbleSort(int[] arr){
			
			boolean sorted = true;
			int swapCount = 0;
			int passCount = 0;
			
			System.out.println("Running Bubble Sort...");
			
			while(sorted){
				
				swapCount = 0;
			
				for(int i = 0; i < arr.length; i++){
					
					if(i < arr.length - 1){
						
						if(arr[i] > arr[i + 1]){
//							System.out.println("i: " + arr[i]);
//							System.out.println("i + 1: " + arr[i + 1]);
							int temp = arr[i + 1];
							arr[i + 1] = arr[i];
							arr[i] = temp;
							swapCount++;
//							System.out.println("SWAP RIGHT");
//							Arrays.stream(arr).forEach(n -> System.out.print(n + ", "));
//							System.out.println();
//							System.out.println();
							
							
						}
					}
					
					if(i > 0){
						if(arr[i] < arr[i - 1]){
//							System.out.println("i: " + arr[i]);
//							System.out.println("i - 1: " + arr[i - 1]);
							int temp = arr[i - 1];
							arr[i - 1] = arr[i];
							arr[i] = temp;
							swapCount++;
//							System.out.println("SWAP LEFT");
//							Arrays.stream(arr).forEach(n -> System.out.print(n + ", "));
//							System.out.println();
//							System.out.println();
						}
					}
				

				}
				
				
				
				if(passCount > 0 && swapCount == 0){
					
					sorted = true;
					break;
				}
				
				passCount++;
				
				
			}
				System.out.println("Bubble Sort Completed in " + passCount + " Passes: ");
				System.out.print("Sorted List: ");
				Arrays.stream(arr).forEach(n -> System.out.print(n + ", "));
				System.out.println();
				System.out.println();
				
			
			return arr;
		}
	
		public static int binarySearch(int n, int[] arr){
			
			boolean found = false;
			int midpoint = 0;
			int num = 0;
			
			System.out.println("Running Binary Search for number " + n + "...");
			
			while(!found){
				midpoint = (arr.length-1) / 2;
				
				if(n > arr[midpoint]){
					arr = Arrays.copyOfRange(arr, (midpoint + 1), (arr.length));
				}else if(n < arr[midpoint]){
					arr = Arrays.copyOfRange(arr, 0, (midpoint));
				}else if(n == arr[midpoint]){
					num = arr[midpoint];
					found = true;
				}
			}
			
			System.out.print("Integer " + n + " was found!");
			System.out.println();
			System.out.println();
			
			return num;
		}
	
		public static int breadthFirstSearch(int n, int arr[]){
			
			return 0;
		}

}
