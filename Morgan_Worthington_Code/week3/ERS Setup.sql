/*******************************************************************************
   Drop database if it exists
********************************************************************************/
DROP USER ers_manager CASCADE;


/*******************************************************************************
   Create database
********************************************************************************/

CREATE USER ers_manager
IDENTIFIED BY p4ssw0rd
DEFAULT TABLESPACE users
TEMPORARY TABLESPACE temp
QUOTA 10M ON users;

GRANT connect to ers_manager;
GRANT resource to ers_manager;
GRANT create session TO ers_manager;
GRANT create table TO ers_manager;
GRANT create view TO ers_manager;

conn ers_manager/p4ssw0rd

/*******************************************************************************
   Create Tables
********************************************************************************/

CREATE TABLE ERS_USER_ROLES
(
    ERS_USER_ROLE_ID NUMBER NOT NULL,
    USER_ROLE VARCHAR2(10) NOT NULL,
    CONSTRAINT ERS_USER_ROLES_PK PRIMARY KEY (ERS_USER_ROLE_ID)
);

CREATE TABLE ERS_USERS
(
  ERS_USERS_ID NUMBER NOT NULL,
  ERS_USERNAME VARCHAR2(50) NOT NULL,
  ERS_PASSWORD VARCHAR2(50) NOT NULL,
  USER_FIRST_NAME VARCHAR2(100) NOT NULL,
  USER_LAST_NAME VARCHAR2(100) NOT NULL,
  USER_EMAIL VARCHAR2(150) NOT NULL,
  USER_ROLE_ID NUMBER NOT NULL,
  CONSTRAINT ERS_USERS_PK PRIMARY KEY(ERS_USERS_ID),
  CONSTRAINT ERS_USERS_UNv1 UNIQUE(ERS_USERNAME,USER_EMAIL),
  CONSTRAINT USER_ROLES_FK FOREIGN KEY (USER_ROLE_ID) REFERENCES ERS_USER_ROLES(ERS_USER_ROLE_ID)
);

CREATE TABLE ERS_REIMBURSEMENT_STATUS
(
  REIMB_STATUS_ID NUMBER NOT NULL,
  REIMB_STATUS VARCHAR2(10) NOT NULL,
  CONSTRAINT REIMB_STATUS_PK PRIMARY KEY(REIMB_STATUS_ID)
);

CREATE TABLE ERS_REIMBURSEMENT_TYPE
(
  REIMB_TYPE_ID NUMBER NOT NULL,
  REIMB_TYPE VARCHAR2(10) NOT NULL,
  CONSTRAINT REIMB_TYPE_PK PRIMARY KEY(REIMB_TYPE_ID)
);

CREATE TABLE ERS_REIMBURSEMENT
(
  REIMB_ID NUMBER NOT NULL,
  REIMB_AMOUNT NUMBER NOT NULL,
  REIMB_SUBMITTED TIMESTAMP NOT NULL,
  REIMB_RESOLVED TIMESTAMP,
  REIMB_DESCRIPTION VARCHAR2 (250),
  REIMB_RECEIPT BLOB,
  REIMB_AUTHOR NUMBER NOT NULL,
  REIMB_RESOLVER NUMBER,
  REIMB_STATUS_ID NUMBER NOT NULL,
  REIMB_TYPE_ID NUMBER NOT NULL,
  CONSTRAINT ERS_REIMBURSEMENT_PK PRIMARY KEY(REIMB_ID),
  CONSTRAINT ERS_USERS_FK_AUTH FOREIGN KEY (REIMB_AUTHOR) REFERENCES ERS_USERS(ERS_USERS_ID),
  CONSTRAINT ERS_USERS_FK_RESOLVER FOREIGN KEY (REIMB_RESOLVER) REFERENCES ERS_USERS(ERS_USERS_ID),
  CONSTRAINT ERS_REIMBURSEMENT_STATUS_FK FOREIGN KEY(REIMB_STATUS_ID) REFERENCES ERS_REIMBURSEMENT_STATUS(REIMB_STATUS_ID),
  CONSTRAINT ERS_REIMBURSEMENT_TYPE_FK FOREIGN KEY (REIMB_TYPE_ID) REFERENCES ERS_REIMBURSEMENT_TYPE(REIMB_TYPE_ID)
);

--if need to clear out tables for setting up properly
DROP TABLE ERS_REIMBURSEMENT;
DROP TABLE ERS_REIMBURSEMENT_STATUS;
DROP TABLE ERS_REIMBURSEMENT_TYPE;
DROP TABLE ERS_USERS;
DROP TABLE ERS_USER_ROLES;

--Input Rows into tables
INSERT INTO ERS_REIMBURSEMENT_TYPE VALUES (1, 'LODGING');
INSERT INTO ERS_REIMBURSEMENT_TYPE VALUES (2, 'TRAVEL');
INSERT INTO ERS_REIMBURSEMENT_TYPE VALUES (3, 'FOOD');
INSERT INTO ERS_REIMBURSEMENT_TYPE VALUES (4, 'OTHER');

INSERT INTO ERS_USER_ROLES VALUES (1, 'MANAGER');
INSERT INTO ERS_USER_ROLES VALUES (2, 'EMPLOYEE');

INSERT INTO ERS_REIMBURSEMENT_STATUS VALUES(1, 'PENDING');
INSERT INTO ERS_REIMBURSEMENT_STATUS VALUES(2, 'APPROVED');
INSERT INTO ERS_REIMBURSEMENT_STATUS VALUES(3, 'DENIED');

--Sequences and Triggers
CREATE SEQUENCE U_SEQ
START WITH 1
INCREMENT BY 1;
/
CREATE SEQUENCE R_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER U_TRIGGER
BEFORE INSERT ON ERS_USERS
FOR EACH ROW
BEGIN
SELECT U_SEQ.NEXTVAL INTO :NEW.ERS_USERS_ID FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER R_TRIGGER
BEFORE INSERT ON ERS_REIMBURSEMENT
FOR EACH ROW
BEGIN
SELECT R_SEQ.NEXTVAL INTO :NEW.REIMB_ID FROM DUAL;
SELECT CURRENT_TIMESTAMP INTO :NEW.REIMB_SUBMITTED FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER RESOLVED
BEFORE UPDATE ON ERS_REIMBURSEMENT
FOR EACH ROW
BEGIN
SELECT CURRENT_TIMESTAMP INTO :NEW.REIMB_RESOLVED FROM DUAL;
END;
/