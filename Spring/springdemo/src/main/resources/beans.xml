<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">
	<!-- Defining our XML namespace : default space for our beans.xml. The namespace 
		acts as a library for the properties that we can use to create and inject 
		into a bean xmlns:si - XML schema Instance/ Schema location - we give this 
		to our XML file for context sensitive help inside of our app makes sure that 
		we have both well formed and valid XML -->

	<bean id="beanbean" class="com.ex.beans.HelloBeans">
		<property name="hello">
			<bean id="helloWorld" class="com.ex.beans.HelloWorld">
				<property name="message"
					value="Hello Spring! This is dependency injection!" />
				<constructor-arg type="java.lang.String"
					value="testing constructor injection" />
			</bean>
		</property>
	</bean>
	
	<!--  AUTOWIRED BEANS -->
	
	
	<bean id="dept" class="com.ex.autowire.Department">
		<property name="name" value="TechTeam"/>
	</bean>
	
	
</beans>

<!-- The above is a spring bean configuration file It is an XML file that 
	that acts as a cement that glues the beans, i.e. the classes together. This 
	file needs to be created under the src directory Usually developers name 
	this file as Beans.xml, but you can choose any name you like. You have to 
	make sure that this file is available in CLASSPATH and use the same name 
	in the main application while creating an application context as shown in 
	MainApp.java file. The Beans.xml is used to assign unique IDs to different 
	beans and to control the creation of objects with different values without 
	impacting any of the Spring source files. For example, using the following 
	file you can pass any value for "message" variable and you can print different 
	values of message without impacting HelloWorld.java and MainApp.java files 
	When Spring application gets loaded into the memory, Framework makes use 
	of the above configuration file to create all the beans defined and assigns 
	them a unique ID as defined in <bean> tag. You can use <property> tag to 
	pass the values of different variables used at the time of object creation -->
