package com.real.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import com.real.pojos.User;
import com.real.util.ConnectionFactory;

public class FileDAO implements DAO{
	
	public User addUser(User u) {
		try(Connection conn = ConnectionFactory.getInstance().getConnection()) {
			conn.setAutoCommit(false);
			String sql = "INSERT INTO USERS(USERNAME, PASSWORD, FIRST_NAME, LAST_NAME, ROLE_ID) VALUES(?, ?, ?, ?, ?)";
			String[] key = new String[1];
			key[0] = "user_id";
			
			PreparedStatement ps = conn.prepareStatement(sql, key);
			ps.setString(1, u.getuName());
			ps.setString(2, u.getPassword());
			ps.setString(3, u.getfName());
			ps.setString(4, u.getlName());
			ps.setInt(5, u.getRole());
			ps.executeUpdate();
			
			ResultSet pk = ps.getGeneratedKeys(); // only retrieve auto-generated keys
			pk.next();
			int id = pk.getInt(1);
			

			conn.commit();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return null;
	}

	public User getUser(String username) {
		User u = new User();
		try(Connection conn = ConnectionFactory.getInstance().getConnection()) {
			String sql = "select * from users where username = ?";
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setString(1, username); // Goes by order of question marks
			ResultSet info = ps.executeQuery();
			while(info.next()) {
				u.setId(info.getInt(1));
				u.setuName(info.getString(2));
				u.setPassword(info.getString(3));
				u.setfName(info.getString(4));
				u.setlName(info.getString(5));
				u.setRole(info.getInt(6));
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return u;
	}

	@Override
	public void addReimbursement(User u, String[] rb) {
		try(Connection conn = ConnectionFactory.getInstance().getConnection()) {
			conn.setAutoCommit(false);
			String sql = "INSERT INTO REIMBURSEMENT(REIMB_AMOUNT, REIMB_SUBMITTED, REIMB_RESOLVED, REIMB_DESCRIPTION, REIMB_AUTHOR, REIMB_RESOLVER, REIMB_STATUS_ID, REIMB_TYPE_ID) VALUES(?, CURRENT_TIMESTAMP(0), NULL, ?, ?, '', 1, ?)";
			
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setInt(1, Integer.parseInt(rb[0]));
			ps.setString(2, rb[2]);
			ps.setInt(3, u.getId());
			ps.setInt(4, Integer.parseInt(rb[1]));
			ps.executeUpdate();

			conn.commit();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	public String[] getReimbursements() {
		String[] values = new String[8];
		try(Connection conn = ConnectionFactory.getInstance().getConnection()) {
			String sql = "select * from users where username = ?";
			Statement s = conn.createStatement();
			ResultSet info = s.executeQuery(sql);
			while(info.next()) {
				u.setId(info.getInt(1));
				u.setuName(info.getString(2));
				u.setPassword(info.getString(3));
				u.setfName(info.getString(4));
				u.setlName(info.getString(5));
				u.setRole(info.getInt(6));
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return u;
	}


}
