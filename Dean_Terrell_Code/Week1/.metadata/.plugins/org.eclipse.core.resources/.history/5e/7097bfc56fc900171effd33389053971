import java.util.LinkedList;
import java.util.List;
import java.util.stream.*;

public class SearchAndSorts {

	public static void main(String[] args) {
		/* Implement
		 * Binary search
		 * breadth first search
		 * depth first search
		 * bubble sort
		 * merge sort
		 * insertion sort
		 */

	}
	
	boolean BinarySearch(int[] data, int key) {
		int low = 0;
		int high = data.length - 1;
		
		while(high >= low) {
			int middle = (low + high) / 2;
			if(data[middle] == key) {
				return true;
			}
			if(data[middle] < key) {
				low = middle + 1;
			}
			if(data[middle] > key) {
				high = middle - 1;
			}
		}
		return false;
	}
	
	public class Node {

	    private Node left;
	    private Node right;
	    private String label;

	    public Node(String label, Node left, Node right) {
	        this.left = left;
	        this.right = right;
	        this.label = label;
	    }

	    @Override
	    public String toString() {
	        return label;
	    }

	    public List<Node> getChildren() {
	        return Stream.of(left, right)
	                .filter(Objects::nonNull)
	                .collect(Collectors.toList());
	    }
	    
	    public List<Node> searchByDepth() {
	        List<Node> visitedNodes = new LinkedList<>();
	        List<Node> unvisitedNodes = new LinkedList<>();
	        unvisitedNodes.add(this);

	        while(!unvisitedNodes.isEmpty()) {
	            Node currNode = unvisitedNodes.remove(0);

	            List<Node> newNodes = currNode.getChildren()
	                    .stream()
	                    .filter(node -> !visitedNodes.contains(node))
	                    .collect(Collectors.toList());

	            unvisitedNodes.addAll(0, newNodes);
	            visitedNodes.add(currNode);
	        }

	        return visitedNodes;
	    }
	    
	    public List<Node> searchByBreadth() {
	        List<Node> visitedNodes = new LinkedList<>();
	        List<Node> unvisitedNodes = Arrays.asList(this);

	        while(!unvisitedNodes.isEmpty()) {
	            List<Node> newNodes = unvisitedNodes
	                    .stream()
	                    .map(Node::getChildren)
	                    .flatMap(List::stream)
	                    .filter(node -> !visitedNodes.contains(node))
	                    .collect(Collectors.toList());

	            visitedNodes.addAll(unvisitedNodes);
	            unvisitedNodes = newNodes;
	        }

	        return visitedNodes;
	    }

	}

	}

	}