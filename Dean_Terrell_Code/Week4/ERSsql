CREATE TABLE USERS(
USER_ID NUMBER PRIMARY KEY,
USERNAME VARCHAR2(50) UNIQUE NOT NULL,
PASSWORD VARCHAR2(50) NOT NULL,
FIRST_NAME VARCHAR2(100) NOT NULL,
LAST_NAME VARCHAR2(100),
EMAIL VARCHAR2(150) UNIQUE NOT NULL,
ROLE_ID NUMBER,
CONSTRAINT FK_ROLE FOREIGN KEY(ROLE_ID) REFERENCES USER_ROLES(USER_ROLE_ID)
);
CREATE TABLE REIMBURSEMENT(
REIMB_ID NUMBER PRIMARY KEY,
REIMB_AMOUNT NUMBER,
REIMB_SUBMITTED TIMESTAMP(0),
REIMB_RESOLVED TIMESTAMP(0),
REIMB_DESCRIPTION VARCHAR2(250),
REIMB_AUTHOR NUMBER,
REIMB_RESOLVER NUMBER,
REIMB_STATUS_ID NUMBER,
REIMB_TYPE_ID NUMBER,
CONSTRAINT FK_AUTH FOREIGN KEY(REIMB_AUTHOR) REFERENCES USERS(USER_ID),
CONSTRAINT FK_RESLVR FOREIGN KEY(REIMB_RESOLVER) REFERENCES USERS(USER_ID),
CONSTRAINT FK_STATUS FOREIGN KEY(REIMB_STATUS_ID) REFERENCES REIMBURSEMENT_STATUS(REIMB_STATUS_ID),
CONSTRAINT FK_TYPE FOREIGN KEY(REIMB_TYPE_ID) REFERENCES REIMBURSEMENT_TYPE(REIMB_TYPE_ID)
);
INSERT INTO REIMBURSEMENT(REIMB_AMOUNT, REIMB_SUBMITTED, REIMB_RESOLVED, REIMB_DESCRIPTION, REIMB_AUTHOR, REIMB_RESOLVER, REIMB_STATUS_ID, REIMB_TYPE_ID) VALUES(5, Current_timestamp(0), null, 


CREATE TABLE test(
test_id number primary key,
today Timestamp(0));

insert into test(test_id, today) values(6, CURRENT_TIMESTAMP(0));
select trunc(today, 'MI') from test; 

CREATE TABLE REIMBURSEMENT_STATUS(
REIMB_STATUS_ID NUMBER PRIMARY KEY,
REIMB_STATUS VARCHAR2(10)
);

CREATE TABLE REIMBURSEMENT_TYPE(
REIMB_TYPE_ID NUMBER PRIMARY KEY,
REIMB_TYPE VARCHAR2(10)
);

CREATE TABLE USER_ROLES(
USER_ROLE_ID NUMBER PRIMARY KEY,
USER_ROLE VARCHAR2(10)
);

-- INTRO TO PL/SQL = PROCEDURAL LANGUAGE EXTENSION OF SQL
-- SEQUENCE
CREATE SEQUENCE ERS_REIM_SEQ
START WITH 100
INCREMENT BY 1;
/
--TRIGGER
CREATE OR REPLACE TRIGGER ERS_REIM_TRIGGER
BEFORE INSERT ON REIMBURSEMENT
FOR EACH ROW
BEGIN
SELECT ERS_REIM_SEQ.NEXTVAL INTO :NEW.REIMB_ID FROM DUAL;
END;
/

CREATE SEQUENCE ERS_USER_SEQ
START WITH 1000
INCREMENT BY 1;
/
--TRIGGER
CREATE OR REPLACE TRIGGER ERS_USER_TRIGGER
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
SELECT ERS_USER_SEQ.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
END;
/
CREATE SEQUENCE ERS_STATUS_SEQ
START WITH 1
INCREMENT BY 1;
/
--TRIGGER
CREATE OR REPLACE TRIGGER ERS_STATUS_TRIGGER
BEFORE INSERT ON REIMBURSEMENT_STATUS
FOR EACH ROW
BEGIN
SELECT ERS_STATUS_SEQ.NEXTVAL INTO :NEW.REIMB_STATUS_ID FROM DUAL;
END;
/
CREATE SEQUENCE ERS_TYPE_SEQ
START WITH 1
INCREMENT BY 1;
/
--TRIGGER
CREATE OR REPLACE TRIGGER ERS_TYPE_TRIGGER
BEFORE INSERT ON REIMBURSEMENT_TYPE
FOR EACH ROW
BEGIN
SELECT ERS_TYPE_SEQ.NEXTVAL INTO :NEW.REIMB_TYPE_ID FROM DUAL;
END;
/
CREATE SEQUENCE ERS_ROLE_SEQ
START WITH 1
INCREMENT BY 1;
/
--TRIGGER
CREATE OR REPLACE TRIGGER ERS_ROLE_TRIGGER
BEFORE INSERT ON USER_ROLES
FOR EACH ROW
BEGIN
SELECT ERS_ROLE_SEQ.NEXTVAL INTO :NEW.USER_ROLE_ID FROM DUAL;
END;
/

INSERT INTO USER_ROLES(User_role)
VALUES('Employee');

INSERT INTO USER_ROLES(User_role)
VALUES('Manager');

INSERT INTO REIMBURSEMENT_STATUS(REIMB_STATUS)
VALUES('Pending');

INSERT INTO REIMBURSEMENT_STATUS(REIMB_STATUS)
VALUES('Approved');

INSERT INTO REIMBURSEMENT_STATUS(REIMB_STATUS)
VALUES('Denied');

INSERT INTO REIMBURSEMENT_TYPE(REIMB_TYPE)
VALUES('Lodging');

INSERT INTO REIMBURSEMENT_TYPE(REIMB_TYPE)
VALUES('Travel');

INSERT INTO REIMBURSEMENT_TYPE(REIMB_TYPE)
VALUES('Food');

INSERT INTO REIMBURSEMENT_TYPE(REIMB_TYPE)
VALUES('Other');

INSERT INTO USERS(USERNAME, PASSWORD, FIRST_NAME, LAST_NAME, EMAIL, ROLE_ID)
VALUES('deant', '123', 'Dean', 'Terrell', 'donnvann@gmail.com', 1);

UPDATE REIMBURSEMENT SET REIMB_STATUS_ID = 1 WHERE REIMB_ID = 101;
select * from reimbursement;

select reimb_id, reimb_status, reimb_amount, reimb_type, trunc(reimb_submitted, 'MI'), reimb_description, first_name, last_name
from reimbursement inner join reimbursement_status on reimbursement.reimb_status_id = reimbursement_status.reimb_status_id
inner join reimbursement_type on reimbursement.reimb_type_id = reimbursement_type.reimb_type_id 
inner join users on user_id = reimb_author where reimb_author = 1000;