-- If database exists, DROP
DROP USER ers CASCADE;

CREATE USER ers
IDENTIFIED BY p4ssw0rd
DEFAULT TABLESPACE users
TEMPORARY TABLESPACE temp
QUOTA 10M ON users;

GRANT connect to ers;
GRANT resource to ers;
GRANT create session TO ers;
GRANT create table TO ers;
GRANT create view TO ers;

-- Create tables
CREATE TABLE ERS_REIMBURSEMENT (
REIMB_ID NUMBER PRIMARY KEY,
REIMB_AMOUNT NUMBER NOT NULL,
REIMB_SUBMITTED TIMESTAMP NOT NULL,
REIMB_RESOLVED TIMESTAMP NOT NULL,
REIMB_DESCRIPTION VARCHAR2(250),
REIMB_RECEIPT BLOB NOT NULL,
REIMB_AUTHOR NUMBER NOT NULL,
REIMB_RESOLVER NUMBER NOT NULL,
REIMB_STATUS_ID NUMBER NOT NULL,
REIMB_TYPE_ID NUMBER NOT NULL
);

CREATE TABLE ERS_REIMBURSEMENT_STATUS (
REIMB_STATUS_ID NUMBER PRIMARY KEY,
REIMB_STATUS VARCHAR2(10) NOT NULL
);

CREATE TABLE ERS_REIMBURSEMENT_TYPE (
REIMB_TYPE_ID NUMBER PRIMARY KEY,
REIMB_TYPE VARCHAR2(10)
);

CREATE TABLE ERS_USERS (
ERS_USERS_ID NUMBER PRIMARY KEY,
ERS_USERNAME VARCHAR2(50) UNIQUE NOT NULL,
ERS_PASSWORD VARCHAR2(50) NOT NULL,
USER_FIRST_NAME VARCHAR2(100) NOT NULL,
USER_LAST_NAME VARCHAR2(100) NOT NULL,
USER_EMAIL VARCHAR2(150) UNIQUE NOT NULL,
USER_ROLE_ID NUMBER
);

CREATE TABLE ERS_USER_ROLES (
ERS_USER_ROLE_ID NUMBER PRIMARY KEY,
USER_ROLE VARCHAR2(10) NOT NULL
);

-- Add constraints
ALTER TABLE ERS_REIMBURSEMENT ADD CONSTRAINT ERS_USERS_FK_AUTH
FOREIGN KEY (REIMB_AUTHOR) REFERENCES ERS_USERS (ERS_USERS_ID);

ALTER TABLE ERS_REIMBURSEMENT ADD CONSTRAINT ERS_USERS_FK_RESLVR
FOREIGN KEY (REIMB_RESOLVER) REFERENCES ERS_USERS (ERS_USERS_ID);

ALTER TABLE ERS_REIMBURSEMENT ADD CONSTRAINT ERS_REIMBURSEMENT_STATUS_FK
FOREIGN KEY (REIMB_STATUS_ID) REFERENCES ERS_REIMBURSEMENT_STATUS(REIMB_STATUS_ID);

ALTER TABLE ERS_REIMBURSEMENT ADD CONSTRAINT ERS_REIMBURSEMENT_TYPE_FK
FOREIGN KEY (REIMB_TYPE_ID) REFERENCES ERS_REIMBURSEMENT_TYPE(REIMB_TYPE_ID);

ALTER TABLE ERS_USERS ADD CONSTRAINT USER_ROLES_FK
FOREIGN KEY (USER_ROLE_ID) REFERENCES ERS_USER_ROLES(ERS_USER_ROLE_ID);

-- triggers/sequences for auto increment fields
CREATE SEQUENCE ERS_USER_SEQ
START WITH 7320
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER ERS_USER_TRIG
BEFORE INSERT ON ERS_USERS
FOR EACH ROW
BEGIN
  SELECT ERS_USER_SEQ.NEXTVAL INTO :NEW.ERS_USERS_ID FROM DUAL;
END;
/

CREATE SEQUENCE ERS_REIMB_SEQ
START WITH 123456
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER ERS_REIMB_TRIG
BEFORE INSERT ON ERS_REIMBURSEMENT
FOR EACH ROW
BEGIN
  SELECT ERS_REIMB_SEQ.NEXTVAL INTO :NEW.REIMB_ID FROM DUAL;
END;
/

-- Insert some data
INSERT INTO ERS_USER_ROLES
VALUES (1, 'Employee');

INSERT INTO ERS_USER_ROLES
VALUES (2, 'Manager');

INSERT INTO ERS_USERS (ERS_USERNAME, ERS_PASSWORD, USER_FIRST_NAME, USER_LAST_NAME,
USER_EMAIL, USER_ROLE_ID)
VALUES ('jdoe','psswrd','John','Doe','jdoe@email.com', 1);

INSERT INTO ERS_USERS (ERS_USERNAME, ERS_PASSWORD, USER_FIRST_NAME, USER_LAST_NAME,
USER_EMAIL, USER_ROLE_ID)
VALUES ('imanage','psswrd','Jack','Nimble', 'jbnimble@email.com', 2);

INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS_ID, REIMB_STATUS)
VALUES (1, 'Pending');

INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS_ID, REIMB_STATUS)
VALUES (2, 'Approved');

INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS_ID, REIMB_STATUS)
VALUES (3, 'Denied');

INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE_ID, REIMB_TYPE)
VALUES (1, 'LODGING');

INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE_ID, REIMB_TYPE)
VALUES (2, 'TRAVEL');

INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE_ID, REIMB_TYPE)
VALUES (3, 'FOOD');

INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE_ID, REIMB_TYPE)
VALUES (4, 'OTHER');
