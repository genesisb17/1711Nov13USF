package ThreadAssignment;

import java.util.ArrayDeque;
import java.util.Queue;

public class Prod_consumer 
{
	  static Queue<Integer> q = new ArrayDeque(10);
	  static class Producer implements Runnable {
		    public void run() {
		        while (true) {
		            synchronized (q) {
		                if (q.size() < 10) {
		                    String st = System.currentTimeMillis() + "";
		                    q.add(st);
		                    q.notifyAll();
		                } else {
		                    try {
		                        System.out.println("Q is full so waiting");
		                        q.wait();
		                    } catch (InterruptedException ex) {
		                        ex.printStackTrace();
		                    }
		                }
		            }
		        }
		    }
		}
	  
	  static class Consumer implements Runnable {
		    public void run() {
		        while (true) {
		            synchronized (q) {
		                if (q.isEmpty()) {
		                    try {
		                        System.out.println("Q is empty so waiting ");
		                        q.wait();
		                    }catch(InterruptedException ie) {
		                        ie.printStackTrace();
		                    }
		                } else {
		                    System.out.println(q.remove());
		                    q.notifyAll();
		                }
		            }
		        }
		    }
		}
	  
	    public static void main(String args[]) {
	        Thread consumer = new Thread(new Consumer());
	        Thread consumer2 = new Thread(new Consumer());
	        Thread producer = new Thread(new Producer());

	        producer.start();
	        consumer.start();
	        consumer2.start();

	    }

}
