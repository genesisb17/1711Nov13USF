CREATE TABLE ERS_REIMBURSEMENT_STATUS(
REIMB_STATUS_ID NUMBER PRIMARY KEY,
REIMB_STATUS VARCHAR2(10) NOT NULL
);

CREATE SEQUENCE STATUS_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER STATUS_TRIGGER
BEFORE INSERT ON ERS_REIMBURSEMENT_STATUS
FOR EACH ROW
BEGIN
SELECT STATUS_SEQ.NEXTVAL INTO :new.REIMB_STATUS_ID FROM DUAL;
END;
/
----------------------------------------------------
CREATE TABLE ERS_REIMBURSEMENT_TYPE(
REIMB_TYPE_ID NUMBER PRIMARY KEY,
REIMB_TYPE VARCHAR2(10) NOT NULL
);

CREATE SEQUENCE TYPE_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER TYPE_TRIGGER
BEFORE INSERT ON ERS_REIMBURSEMENT_TYPE
FOR EACH ROW
BEGIN
SELECT TYPE_SEQ.NEXTVAL INTO :new.REIMB_TYPE_ID FROM DUAL;
END;
/
------------------------------------------------

CREATE TABLE ERS_USER_ROLES(
ERS_USER_ROLE_ID NUMBER PRIMARY KEY,
USER_ROLE VARCHAR2(10) NOT NULL
);

CREATE SEQUENCE ROLE_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER ROLE_TRIGGER
BEFORE INSERT ON ERS_USER_ROLES
FOR EACH ROW
BEGIN
SELECT ROLE_SEQ.NEXTVAL INTO :new.ERS_USER_ROLE_ID FROM DUAL;
END;
/
----------------------------------------------------
CREATE TABLE ERS_USERS(
ERS_USERS_ID NUMBER PRIMARY KEY,
ERS_USERNAME VARCHAR2(50) UNIQUE NOT NULL,
ERS_PASSWORD VARCHAR2(50) NOT NULL,
USER_FIRST_NAME VARCHAR2(100) NOT NULL,
USER_LAST_NAME VARCHAR2(100) NOT NULL,
USER_EMAIL VARCHAR2(150) UNIQUE NOT NULL,
USER_ROLE_ID NUMBER NOT NULL,

CONSTRAINT USER_ROLES_FK FOREIGN KEY(USER_ROLE_ID)
REFERENCES ERS_USER_ROLES(ERS_USER_ROLE_ID)
);

CREATE SEQUENCE USER_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER USER_TRIGGER
BEFORE INSERT ON ERS_USERS
FOR EACH ROW
BEGIN
SELECT USER_SEQ.NEXTVAL INTO :new.ERS_USERS_ID FROM DUAL;
END;
/
-----------------------------------------------------------------------

CREATE TABLE ERS_REIMBURSEMENT(
REIMB_ID NUMBER PRIMARY KEY,
REIMB_AMOUNT NUMBER(19,2) NOT NULL,
REIMB_SUBMITTED TIMESTAMP NOT NULL,
REIMB_RESOLVED TIMESTAMP,
REIMB_DESCRIPTION VARCHAR2(250),
REIMB_RECEIPT BLOB,
REIMB_AUTHOR NUMBER NOT NULL,
REIMB_RESOLVER NUMBER,
REIMB_STATUS_ID NUMBER NOT NULL,
REIMB_TYPE_ID NUMBER NOT NULL,


CONSTRAINT ERS_USERS_FK_AUTH FOREIGN KEY(REIMB_AUTHOR) 
REFERENCES ERS_USERS(ERS_USERS_ID),

CONSTRAINT ERS_USERS_FK_RESLVR FOREIGN KEY(REIMB_RESOLVER)
REFERENCES ERS_USERS(ERS_USERS_ID),

CONSTRAINT ERS_REIMBURSEMENT_STATUS_FK FOREIGN KEY(REIMB_STATUS_ID) 
REFERENCES ERS_REIMBURSEMENT_STATUS(REIMB_STATUS_ID),

CONSTRAINT ERS_REIMBURSEMENT_TYPE_FK FOREIGN KEY(REIMB_TYPE_ID)
REFERENCES ERS_REIMBURSEMENT_TYPE(REIMB_TYPE_ID)
);

CREATE SEQUENCE REIMB_SEQ
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER SUBMITTED_TRIGGER
BEFORE INSERT ON ERS_REIMBURSEMENT
FOR EACH ROW
BEGIN
SELECT REIMB_SEQ.nextval INTO :new.REIMB_ID FROM DUAL;
SELECT LOCALTIMESTAMP INTO :new.REIMB_SUBMITTED FROM DUAL;
-- 1 IS STATUS ID FOR PENDING
SELECT 1 INTO :new.REIMB_STATUS_ID FROM DUAL;
END;
/

INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('PENDING');
INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('APPROVED');
INSERT INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS) VALUES('DENIED');

INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('TRAVEL');
INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('LODGING');
INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('FOOD');
INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE) VALUES('OTHER');

INSERT INTO ERS_USER_ROLES(USER_ROLE) VALUES('MANAGER');
INSERT INTO ERS_USER_ROLES(USER_ROLE) VALUES('EMPLOYEE');

COMMIT;

CREATE OR REPLACE TRIGGER ERS_RESOLVE_TRIGGER
BEFORE UPDATE OF REIMB_STATUS_ID ON ERS_REIMBURSEMENT
FOR EACH ROW
BEGIN
SELECT LOCALTIMESTAMP INTO :new.REIMB_RESOLVED FROM DUAL;
END;
/

select * from ERS_USER_ROLES;
SELECT * FROM ERS_REIMBURSEMENT_TYPE;
SELECT * FROM ERS_REIMBURSEMENT_STATUS;
SELECT * FROM ERS_REIMBURSEMENT;
SELECT * FROM ERS_USERS;

INSERT INTO ERS_USERS(ERS_USERNAME, ERS_PASSWORD, USER_FIRST_NAME, USER_LAST_NAME, USER_EMAIL, USER_ROLE_ID)
VALUES('MATTYBOY', '123PASS', 'MATT', 'LOU', 'MATTYBOY@GMAIL.COM', 2);

SELECT * FROM ERS_USERS;
DELETE ERS_USERS WHERE ERS_PASSWORD = '123PASS';
DELETE ERS_USERS WHERE ERS_PASSWORD = '123';

select * from ers_reimbursement;
----------------------------------------------------------------------------
insert into ers_reimbursement(reimb_amount, reimb_description, reimb_author, reimb_type_id)
values(23.50, 'for food', 2, 3);
--------------------------------------------------------------------------

INSERT INTO ERS_REIMBURSEMENT(REIMB_AMOUNT, REIMB_AUTHOR, REIMB_TYPE_ID)
VALUES(100.00, 2, 1);

UPDATE ERS_REIMBURSEMENT
SET REIMB_RESOLVER = 2, REIMB_STATUS_ID = 2
WHERE REIMB_ID = 2;

SELECT * FROM ERS_REIMBURSEMENT;

select * from ers_users;
select user_email from ers_users;
select ers_username from ers_users;
select reimb_amount, reimb_submitted, reimb_resolved, reimb_description, reimb_author, reimb_resolver, 
reimb_status_id, reimb_type_id from ers_reimbursement;
/
insert into ERS_USERS(ERS_USERNAME, ERS_PASSWORD,USER_FIRST_NAME, USER_LAST_NAME, USER_EMAIL, USER_ROLE_ID)
VALUES('mattyboy1', '123', 'matt', 'lou', 'matty@gmail.com', '2');
/
delete ers_users where ers_username = '1234';
commit;





