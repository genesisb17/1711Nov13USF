package com.bank.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.bank.pojos.User;
import com.bank.util.ConnectionFactory;

public class UserDAOImp implements UserDAO
{

	@Override
	public ArrayList<User> getAllUsers()
	{

		return null;
	}

	@Override
	public boolean addUser(User user)
	{
		try (Connection conn = ConnectionFactory.getInstance().getConnection();)
		{
			conn.setAutoCommit(false);
			String sql = "INSERT INTO USERS (USERNAME) VALUES (?)";
			String[] key = new String[1];
			key[0] = "U_ID";

			PreparedStatement ps = conn.prepareStatement(sql, key);

			ps.setString(1, user.getUserName());
			int rows = ps.executeUpdate();
			if (rows != 0)
			{
				ResultSet pk = ps.getGeneratedKeys();
				while (pk.next())
				{
					user.setUserId(pk.getInt(1));
				}
				user.setUserName(user.getUserName());
				conn.commit();
			}

		} catch (SQLException e)
		{
			e.printStackTrace();
		}

		return true;
	}

	@Override
	public User getUser(User user)
	{
		System.out.println("In UserDAOImpl getUser()");
		User u = new User();

		try (Connection conn = ConnectionFactory.getInstance().getConnection();)
		{
			System.out.println("In Connection of getUser()");
			String sql = "SELECT * FROM USERS WHERE USERNAME = ? AND PASSWORD = ?";
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setString(1, user.getUserName());
			ps.setString(2, user.getPassWord());
			System.out.println(user.getPassWord());
			ResultSet info = ps.executeQuery(sql);

			System.out.println(info.next());

			while (info.next())
			{
				System.out.println("In while loop: " + info.getInt(1));
				u.setUserId(info.getInt(1));
				u.setFirstName(info.getString(2));
				u.setLastName(info.getString(3));
				u.setUserName(info.getString(4));
				u.setPassWord(info.getString(5));
			}
		} catch (SQLException e)
		{
			e.printStackTrace();
		}
		
		System.out.println(u.getFirstName());
		
		if (u.getUserId() != 0)
			return u;
		else
			return null;
	}

	@Override
	public void updateUser(User user)
	{

	}

	@Override
	public void deleteUser(User user)
	{

	}

}
