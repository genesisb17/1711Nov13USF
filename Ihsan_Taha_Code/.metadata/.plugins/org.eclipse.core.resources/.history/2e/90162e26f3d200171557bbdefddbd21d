package com.bank.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import com.bank.pojos.Account;
import com.bank.pojos.User;
import com.bank.util.ConnectionFactory;

public class AccountDAOImp implements AccountDAO
{

	@Override
	public ArrayList<Account> getAllAccounts(User user)
	{
		ArrayList<Account> accounts = new ArrayList<>();

		try (Connection conn = ConnectionFactory.getInstance().getConnection())
		{
			String sql = "SELECT * FROM ACCOUNTS WHERE USER_ID = ?";
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setInt(1, user.getUserId());
			ResultSet rs = ps.executeQuery();

			while (rs.next())
			{
				Account temp = new Account();
				temp.setAccountId(rs.getInt(1));
				temp.setUserId(rs.getInt(2));
				temp.setBalance(rs.getDouble(3));
				accounts.add(temp);
			}
		} catch (SQLException e)
		{
			// e.printStackTrace();
			return null;
		}

		System.out.println("Please choose one of your available account ids to access");
		for (int i = 0; i < accounts.size(); i++)
		{
			System.out.println(accounts.get(i).getAccountId());
		}

		return accounts;
	}

	@Override
	public ArrayList<Account> getAccountsByUserId(User user)
	{

		return null;
	}

	@Override
	public Account addAccount(User user, Account account)
	{
		conn.setAutoCommit(false);
		String sql = "INSERT INTO USERS (FIRSTNAME,LASTNAME,USERNAME,PASSWORD) VALUES (?,?,?,?)";
		String[] key = new String[1];
		key[0] = "U_ID";

		PreparedStatement ps = conn.prepareStatement(sql, key);

		ps.setString(1, user.getFirstName());
		ps.setString(2, user.getLastName());
		ps.setString(3, user.getUserName());
		ps.setString(4, user.getPassWord());
		
		int rows = ps.executeUpdate();
		if (rows != 0)
		{
			ResultSet rs = ps.getGeneratedKeys();
			while (rs.next())
			{
				user.setUserId(rs.getInt(1));
				user.setFirstName(rs.getString(2));
				user.setLastName(rs.getString(3));
				user.setUserName(rs.getString(4));
				user.setPassWord(rs.getString(5));					
			}
			
			conn.commit();
		}

	} catch (SQLException e)
	{
		//e.printStackTrace();
	}

	if (user.getUserId() != 0)
		return user;
	else
		return null;
	}

	@Override
	public Account getAccount(int acc_id)
	{
		Account account = new Account();

		try (Connection conn = ConnectionFactory.getInstance().getConnection();)
		{
			String sql = "SELECT * FROM ACCOUNTS WHERE ACC_ID = ?";
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setInt(1, acc_id);
			ResultSet rs = ps.executeQuery();

			while (rs.next())
			{
				account.setAccountId(rs.getInt(1));
				account.setUserId(rs.getInt(2));
				account.setBalance(rs.getDouble(3));
			}
		} catch (SQLException e)
		{
			// e.printStackTrace();
			return null;
		}

		if (account.getAccountId() == 0)
			return null;
		else
			return account;
	}

	@Override
	public void updateAccount(Account account)
	{

	}

	@Override
	public void deleteAccount(Account account)
	{

	}

}
