package com.bank.test;

import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.Scanner;

import com.bank.pojos.User;
import com.bank.pojos.Account;
import com.bank.util.Service;

/**
 * 
 * @author Ihsan Taha
 * 
 *         The following program allows users to create a bank account or login
 *         to an existing account and update their balance. The program does not
 *         allow duplicate user names nor invalid user input at any point.
 *
 */
public class MainTest
{

	// Create a service to manage user data
	static Service service = new Service();

	public static void main(String[] args)
	{
		run();
	}

	// Create an account or login to an existing one
	static void run()
	{
		System.out.println("Welcome to USF Bank: Select an option below:\n1- Login\n2- Sign up");

		Scanner scan = new Scanner(System.in);
		String option = scan.nextLine();
		switch (option)
		{
		case "1":
			login();
		case "2":
			createUser();
		default:
			run();
		}
	}

	// Login to account with a valid username and associated password
	static User login()
	{
		User user = new User();

		System.out.println("Please enter your username: ");
		Scanner scan = new Scanner(System.in);
		String option = scan.nextLine();
		user.setUserName(option);

		System.out.println("Please enter your password: ");
		scan = new Scanner(System.in);
		option = scan.nextLine();
		user.setPassWord(option);

		if (service.getUser(user) != null)
			accessAccountService(service.getUser(user));
		else
		{
			System.out.println("Sorry, you have entered an invalid user account. Please try again.");
			run();
		}

		return null;
	}

	// Create a new account with a unique username, otherwise return to main menu
	static User createUser()
	{
		User user = new User();

		System.out.print("Please enter your first name:\t");
		Scanner scan = new Scanner(System.in);
		String option = scan.nextLine();
		user.setFirstName(option);
		System.out.println();

		System.out.print("Please enter your last name:\t");
		scan = new Scanner(System.in);
		option = scan.nextLine();
		user.setLastName(option);
		System.out.println();

		System.out.print("Please enter your username:\t");
		scan = new Scanner(System.in);
		option = scan.nextLine();
		user.setUserName(option);
		System.out.println();

		System.out.print("Please enter your password:\t");
		scan = new Scanner(System.in);
		option = scan.nextLine();
		user.setPassWord(option);
		System.out.println();

		if (service.addUser(user) != null)
			accessAccountService(service.getUser(user));
		else
		{
			System.out.println("Sorry, the username you entered already exists.");
			run();
		}

		return null;
	}

	// Create an account, delete an account, or access an account
	static void accessAccountService(User user)
	{
		Account account = new Account();

		System.out.println("Hello " + user.getFirstName()
				+ ", select an option below:\n1- Create New Account\n2- Access Account\n3- Delete Account");

		Scanner scan = new Scanner(System.in);
		String option = scan.nextLine();

		switch (option)
		{

		case "1":
			createAccount(user);
			break;
		case "2":
			selectAccount(user);
			break;
		case "3":
			deleteAccount(user);
			break;
		case "4":
			run();
		case "5":
			service.deleteUser(user); // For admin only
		default:
			System.out.println("You have entered an invalid answer. Please try again.");
			accessAccountService(user);
		}
	}

	// Create an account
	static void createAccount(User user)
	{
		service.addAccount(user);
		accessAccountService(user);
	}

	static void selectAccount(User user)
	{
		Scanner scan = new Scanner(System.in);

		// Display the available accounts for this user
		ArrayList<Account> accounts = service.getAllAccounts(user);

		// Proceed if the user has at least one account
		if (accounts != null)
		{
			boolean validAccount = false;
			do
			{
				// Enter the account id you wish to access from the list of options
				System.out.println("Select an account from the provided ID list:");
				scan = new Scanner(System.in);
				int op = scan.nextInt();
				// If the account id is valid, access it, otherwise try again
				if (service.getAccount(op) != null)
				{
					accessAccount(user, service.getAccount(op));
					validAccount = true;
				} else
				{
					System.out.println("You have entered an invalid answer. Please try again.");
					validAccount = false;
				}
			} while (validAccount == false);
		} else
		{
			System.out.println("You do not have any accounts set up. Please create an account before accessing it.");
			accessAccountService(user);
		}
	}

	// Delete an account
	static void deleteAccount(User user)
	{
		/*
		 * // Display the available account ids for this user ArrayList<Account>
		 * accountsToDelete = service.getAccountsByUserId(user);
		 * 
		 * // Proceed if the user has at least one account boolean validDelete = false;
		 * if (accountsToDelete.size() > 0) { do { // Enter the account id you wish to
		 * access from the list of options System.out.
		 * println("Select the account you wish to delete by entering the account id:");
		 * scan = new Scanner(System.in); int op = scan.nextInt(); // If the account id
		 * is valid, access it, otherwise try again if (service.getAccount(op) != null)
		 * { deleteAccount(account); validDelete = true; } else
		 * System.out.println("You have entered an invalid answer. Please try again.");
		 * } while (validDelete = false); } else { System.out.
		 * println("You do not have any accounts set up. Please create an account before accessing it."
		 * ); accessAccountService(user); } service.deleteAccount(account);
		 */
	}

	// Withdraw, deposit, or view balance and update accordingly to file
	static void accessAccount(User user, Account account)
	{
		System.out.print("Account: " + account.getAccountId() + "\t");
		viewBalance(user, account);
		System.out
				.println("Select an option below:\n1- Withdraw Money\n2- Deposit Money\n3- Switch Account\n4- Logout");

		Scanner scan = new Scanner(System.in);
		String option = scan.nextLine();
		switch (option)
		{
		case "1":
			withdrawMoney(user, account);
		case "2":
			depositMoney(user, account);
		case "3":
			accessAccountService(user);
		case "4":
			run();
		default:
			System.out.println("You have entered an invalid answer. Please try again.");
			accessAccountService(user);
		}
	}

	// Withdraw money equal or less to the current balance
	static void withdrawMoney(User user, Account account)
	{
		double amount = 0.0d;

		do
		{
			// For all but the first iteration, check amount
			if (amount > account.getBalance())
				System.out.println("You do not have sufficient funds");

			System.out.println("How much money would you like to withdraw? ");
			Scanner scanWithdraw = new Scanner(System.in);
			try
			{
				amount = scanWithdraw.nextDouble();
			} catch (InputMismatchException e)
			{
				System.out.println("You have entered an invalid answer. Please Try again.");
				withdrawMoney(user, account);
			}

		} while (amount > account.getBalance());

		account.setBalance(account.getBalance() - amount);
		service.updateAccount(account);
		accessAccount(user, account);
	}

	// Deposit money into current balance
	static void depositMoney(User user, Account account)
	{
		double amount = 0.0d;

		do
		{
			// For all but the first iteration, check amount
			if (amount < 0)
				System.out.println("You have entered an invalid amount");

			System.out.println("How much money would you like to deposit? ");
			Scanner scanDeposit = new Scanner(System.in);
			try
			{
				amount = scanDeposit.nextDouble();
			} catch (InputMismatchException e)
			{
				System.out.println("You have entered an invalid answer. Please Try again.");
				continue;
			}

		} while (amount <= 0);

		account.setBalance(amount + account.getBalance());
		service.updateAccount(account);
		accessAccount(user, account);
	}

	// View current balance
	static void viewBalance(User user, Account account)
	{
		System.out.println("Current Balance: " + account.getBalance());
	}
}
