
/*******************************************************************************
  Expense Reimbursement System Database - Version 1.0
  Script: ERS_dml.sql
  Description: Manipulates the ERS database.
  DB Server: Oracle
  Author: Ihsan Taha
/*******************************************************************************

/*******************************************************************************
  Create the reimbursement types, status types, and user roles
/******************************************************************************/
SAVEPOINT REIMB_TYPE_SP1;

INSERT ALL
  INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE_ID, REIMB_TYPE)
  VALUES (1, 'LODGING')
  INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE_ID, REIMB_TYPE)
  VALUES (2, 'TRAVEL')
  INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE_ID, REIMB_TYPE)
  VALUES (3, 'FOOD')
  INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE_ID, REIMB_TYPE)
  VALUES (4, 'OTHER')
SELECT * FROM DUAL;
  
SAVEPOINT REIMB_STATUS_SP2;

INSERT ALL
  INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS_ID, REIMB_TYPE)
  VALUES (1, 'PENDING')
  INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS_ID, REIMB_TYPE)
  VALUES (2, 'APPROVED')
  INTO ERS_REIMBURSEMENT_STATUS (REIMB_STATUS_ID, REIMB_TYPE)
  VALUES (3, 'DENIED')
SELECT * FROM DUAL;

SAVEPOINT ERS_ROLES_SP3;

INSERT ALL
  INTO ERS_USER_ROLES (ERS_USER_ROLE_ID, USER_ROLE)
  VALUES (1, 'USER')
  INTO ERS_USER_ROLES (ERS_USER_ROLE_ID, USER_ROLE)
  VALUES (2, 'MANAGER')
SELECT * FROM DUAL;

/*******************************************************************************
  Create sequences and triggers for users and reimbursemenets
/******************************************************************************/
SAVEPOINT USER_SEQ_P4;

CREATE SEQUENCE USER_SEQ
START WITH 1
INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER USER_TRIGGER
BEFORE INSERT ON ERS_USERS
FOR EACH ROW
BEGIN
  SELECT USER_SEQ.NEXTVAL INTO :NEW.ERS_USERS_ID FROM DUAL;
END;
/

SAVEPOINT REIMB_SEQ_P5;

CREATE SEQUENCE REIMB_SEQ
START WITH 1
INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER REIMB_TRIGGER
BEFORE INSERT ON ERS_REIMBURSEMENT
FOR EACH ROW
BEGIN
  SELECT REIMB_SEQ.NEXTVAL INTO :NEW.REIMB_ID FROM DUAL;
  SELECT CURRENT_TIMESTAMP INTO :NEW.REIMB_SUBMITTED FROM DUAL;
  SELECT (
            SELECT ES.REIMB_STATUS_ID
            FROM ERS_REIMBURSEMENT_STATUS ES
            WHERE ES.REIMB_STATUS_ID = 1
          )
  INTO :NEW.REIMB_STATUS_ID FROM DUAL;
  --SELECT NULL INTO :NEW.REIMB_RESOLVED FROM DUAL;
  SELECT NULL INTO :NEW.REIMB_RESOLVER FROM DUAL;
END;
/

SAVEPOINT REIMB_RESOLVED_P6;

CREATE OR REPLACE TRIGGER REIMB_RESOLVED_TRIGGER
AFTER UPDATE ON ERS_REIMBURSEMENT
FOR EACH ROW
BEGIN
   UPDATE ERS_REIMBURSEMENT
   SET REIMB_RESOLVED = CURRENT_TIMESTAMP
   WHERE REIMB_RESOLVED = :NEW.REIMB_RESOLVED;
 --or
 --SELECT CURRENT_TIMESTAMP INTO :NEW.REIMB_RESOLVED FROM DUAL;
END;
/

ROLLBACK TO REIMB_TYPE_SP1;
ROLLBACK TO REIMB_STATUS_SP2;
ROLLBACK TO ERS_ROLES_SP3;
ROLLBACK TO USER_SEQ_SP4;
ROLLBACK TO REIMB_SEQ_SP5;
ROLLBACK TO REIMB_RESOLVED_P6;

SELECT * FROM ERS_REIMBURSEMENT_STATUS;

COMMIT;

/*******************************************************************************
  Create Stored Procedure for Callable Statement
/******************************************************************************/
CREATE OR REPLACE PROCEDURE GET_REIMBURSEMENTS(REIMBURSEMENTS OUT SYS_REFCURSOR)
AS
BEGIN
  OPEN REIMBURSEMENTS FOR
  SELECT * FROM ERS_REIMBURSEMENT;
END;
/